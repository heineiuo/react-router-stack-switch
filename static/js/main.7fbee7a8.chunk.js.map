{"version":3,"sources":["logo.svg","StackSwitch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","reducer","state","action","type","payload","stack","slice","count","length","push","StackSwitch","props","React","useState","rect","setRect","useReducer","dispatch","history","useHistory","location","useLocation","firstLocation","useSpring","config","duration","left","lastStyle","setLast","divRef","useRef","renderNextScreen","useCallback","children","useEffect","unlisten","listen","width","current","getBoundingClientRect","ref","style","position","top","right","bottom","map","item","index","shouldHidden","div","key","path","display","height","interpolate","value","App","className","src","logo","alt","to","Learn","params","useParams","paddingLeft","paddingRight","borderBottom","backgroundColor","justifyContent","alignItems","onClick","goBack","color","fontWeight","border","borderRadius","padding","role","aria-label","chapter","Math","random","Router","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fbee7a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\n * Copyright (c) 2018-present, heineiuo.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport { animated, useSpring } from \"react-spring\";\nimport { Switch, useHistory, useLocation } from \"react-router-dom\";\nimport { Location } from \"history\";\n\nfunction reducer(state: any, action: any) {\n  const { type, payload } = action;\n  let stack = state.stack.slice();\n  let count = state.count;\n  if (type === \"PUSH\") {\n    if (count === stack.length - 1) {\n      stack[stack.length - 1] = payload;\n      count++;\n    } else {\n      stack.push(payload);\n      count++;\n    }\n  } else if (type === \"POP\") {\n    count--;\n  } else if (type === \"REPLACE\") {\n    if (stack.length > 0) {\n      stack[stack.length - 1] = payload;\n    }\n  } else if (type === \"RESET\") {\n    stack = [];\n    count = 0;\n  }\n  return {\n    stack,\n    count\n  };\n}\n\ninterface StackSwitchProps {\n  children:\n    | React.ReactElement\n    | JSX.Element\n    | React.ReactElement[]\n    | JSX.Element[];\n}\n\nexport function StackSwitch(props: StackSwitchProps) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  const [state, dispatch] = React.useReducer(reducer, {\n    stack: [],\n    count: 0\n  });\n  const history = useHistory();\n  const location = useLocation();\n  const [firstLocation] = React.useState(location);\n  const [lastStyle, setLast] = useSpring(() => ({\n    config: { duration: 180 },\n    left: 0\n  }));\n  const divRef = React.useRef<HTMLDivElement | null>(null);\n\n  const renderNextScreen = React.useCallback(\n    (location: Location) => {\n      return <Switch location={location}>{props.children}</Switch>;\n    },\n    [props.children]\n  );\n\n  React.useEffect(() => {\n    dispatch({ type: \"RESET\" });\n    dispatch({ type: \"PUSH\", payload: renderNextScreen(firstLocation) });\n  }, [firstLocation, renderNextScreen, setLast]);\n\n  React.useEffect(() => {\n    const unlisten = history.listen((location, action) => {\n      if (action === \"REPLACE\" || action === \"PUSH\") {\n        const payload = renderNextScreen(location);\n        dispatch({ type: action, payload });\n      } else {\n        dispatch({ type: action });\n      }\n    });\n\n    return () => {\n      unlisten();\n    };\n  }, [renderNextScreen, history, setLast]);\n\n  React.useEffect(() => {\n    if (rect) {\n      setLast({ left: (state.count - 1) * rect.width });\n    }\n  }, [state.count, setLast, rect]);\n\n  React.useEffect(() => {\n    if (divRef.current) {\n      setRect(divRef.current.getBoundingClientRect());\n    }\n  }, []);\n\n  return (\n    <div\n      ref={divRef}\n      style={{ position: \"absolute\", top: 0, right: 0, bottom: 0, left: 0 }}\n    >\n      {!rect\n        ? null\n        : state.stack.map((item: any, index: number) => {\n            const shouldHidden = index < state.count - 2;\n            return (\n              <animated.div\n                key={index + \":\" + item.props.path}\n                style={{\n                  display: shouldHidden ? \"none\" : \"block\",\n                  position: \"absolute\",\n                  top: 0,\n                  width: rect.width,\n                  height: rect.height,\n                  left: lastStyle.left.interpolate(value => {\n                    return typeof value === \"number\"\n                      ? index * rect.width - value\n                      : 0;\n                  })\n                }}\n              >\n                {item}\n              </animated.div>\n            );\n          })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  HashRouter,\n  Route,\n  useParams,\n  useHistory,\n  Link\n} from \"react-router-dom\";\nimport { StackSwitch } from \"./StackSwitch\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <Link className=\"App-link\" to=\"/learn/1\">\n          Learn React\n        </Link>\n      </header>\n    </div>\n  );\n};\n\nconst Learn: React.FC = () => {\n  const params = useParams<{ chapter: string }>();\n  const history = useHistory();\n  return (\n    <div>\n      <div\n        style={{\n          height: 64,\n          paddingLeft: 20,\n          paddingRight: 20,\n          borderBottom: \"1px solid #eee\",\n          display: \"flex\",\n          backgroundColor: \"#fff\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\"\n        }}\n      >\n        <div style={{ width: 300, display: \"flex\" }}>\n          <div\n            onClick={history.goBack}\n            style={{\n              color: \"#000\",\n              fontWeight: 300,\n              backgroundColor: \"#fff\",\n              border: \"1px solid #eee\",\n              borderRadius: 4,\n              padding: 10\n            }}\n          >\n            <span role=\"img\" aria-label=\"back\">\n              ⬅️\n            </span>{\" \"}\n            BACK\n          </div>\n        </div>\n        <div>learn: {params.chapter}</div>\n        <div style={{ width: 300 }}></div>\n      </div>\n      <div className=\"App\">\n        <div style={{ height: 300 }}></div>\n        <Link className=\"App-link\" to={`/learn/${Math.random() * 100000}`}>\n          learn more\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nconst Router: React.FC = () => {\n  return (\n    <HashRouter>\n      <StackSwitch>\n        <Route path=\"/\" exact component={App}></Route>\n        <Route path=\"/learn/:chapter\" exact component={Learn}></Route>\n      </StackSwitch>\n    </HashRouter>\n  );\n};\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}